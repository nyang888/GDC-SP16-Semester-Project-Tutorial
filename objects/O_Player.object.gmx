<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>S_DogStand_R</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed=.25;
xSpeed=0;
ySpeed=0;
grounded=false;
ms=3;
jump_max=5;
jump_timer=jump_max;
grav=.5;
//contolling shot speed
fire_delay=0;
fire_delay_max=4;
//gives the bullet this speed
shot_speed=16;

//Variable for overheating
overheat = 1;
overheat_max = 10;
overheat_increment = .5;
overheat_decrement = .05;

//keeping track of direction
facing=1;
left=0;
right=1;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///CONTROLS

    //moving left and right
    if(keyboard_check(vk_left))
    {
        facing=left;
        xSpeed=-ms;
        sprite_index=S_DogRun_L;
     
        
    }
    if(keyboard_check_released(vk_left))
    {
     
           xSpeed=0;
           sprite_index=S_DogStand_L;
        
    }
    if(keyboard_check(vk_right))
    {
        facing=right;
        xSpeed=ms;
        sprite_index=S_DogRun_R;
        
    }
    if(keyboard_check_released(vk_right))
    {
        xSpeed=0;
        sprite_index=S_DogStand_R;
    }
    //JUMPING
    
    //initial speed
    if(keyboard_check_pressed(ord('X')))
    {
        if(grounded==true)
        {
            audio_play_sound(choose(M_Jump1,M_Jump2),0,false);
            ySpeed=-8;
            jump_timer=jump_max;
        }
    }
    //If you hold x you go higher
    if(keyboard_check(ord('X')) and grounded==false)
    {
        if(jump_timer&gt;0)
        {
            jump_timer-=1;
            ySpeed-=1;
        }
    }
    //Release x, stop going higher
    if(keyboard_check_released(ord('X')))
    {
        jump_timer=0;
    }
    //Shooting   
    
    if(keyboard_check(ord('C')))
    {
        //When the timer is 0, create bullet
        if(fire_delay==0)
        {
            audio_play_sound(M_Shoot,0,false);
           if(facing==right)
           {
              var Bullet= instance_create(x+sprite_width,y+sprite_height/2,O_Bullet);
                Bullet.xSpeed=shot_speed;
                //create the shell and give it horizontal speed
              var Shell=instance_create(x,y+25,O_Shell);
                Shell.xSpeed=-8;
                
           }
           if(facing==left)
           {
                var Bullet= instance_create(x,y+sprite_height/2,O_Bullet);
                Bullet.xSpeed=-shot_speed;
                     //create the shell and give it horizontal speed
                   var Shell=instance_create(x+sprite_width,y+25,O_Shell);
                Shell.xSpeed=8;
           }
           fire_delay=fire_delay_max;
           
           // After each shot, increment the overheat
           if ( overheat &lt; overheat_max ){
             overheat += overheat_increment;
           }
        }    
        //While you're holding c, decrement timer
        fire_delay-=1;
        
    } else {
        if( overheat &gt; 1 ){
            overheat -= overheat_decrement;
        }
    }
    
    // When C is released, the timer is set back to 0, decrement overheat
    if(keyboard_check_released(ord('C')))
    {
        fire_delay=0;
        
    }

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///COLLISION

    //sets max fall speed
 if (ySpeed &lt;10)
    {   
        ySpeed+=grav;
    }

    //horizontal collision
    if(place_meeting(x + xSpeed, y,O_Ground))
    {
        while(!place_meeting(x+sign(xSpeed),y,O_Ground))
        {
            x += sign(xSpeed);
            
        }
        xSpeed =0;
    }
    
    //vertical collision
 
    if(place_meeting(x, y + ySpeed,O_Ground))
    {
        while(!place_meeting(x,y+sign(ySpeed),O_Ground))
        {
            y += sign(ySpeed);
        }
        // When you touch the ground, set the animation back to standing
        if(sprite_index=S_Jump_L)
        {
            sprite_index=S_DogStand_L;
        }
          if(sprite_index=S_Jump_R)
        {
            sprite_index=S_DogStand_R;
        }
       ySpeed=0;
        grounded=true;
        
    }
    else
    {
        grounded=false;
    }
    
//Always add xSpeed and ySpeed to your x,y coordinates    
x+=xSpeed;
y+=ySpeed;


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Jumping animation

//If you're in the air, set the animation to either jumping right or left.

if(facing==right)
{   
    if(grounded==false)
        {
            sprite_index=S_Jump_R;
        }
    }
if(facing==left)
{
    if(grounded==false)
    {
        sprite_index=S_Jump_L;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();

var BLX=20;
var BLY=20;

var length_max=100;
var width=10;
var length=(O_Player.overheat-1)/(O_Player.overheat_max-1)*length_max;


draw_set_color(c_black)
draw_rectangle(BLX-2,BLY-2,BLX+length_max+2,BLY+width+2,false);


draw_set_color(make_colour_hsv(110-(O_Player.overheat*10),255,255))
draw_rectangle(BLX,BLY,BLX+length,BLY+width,false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
